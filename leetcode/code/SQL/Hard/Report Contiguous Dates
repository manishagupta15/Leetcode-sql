-- 
-- Table: Failed
-- 
-- +--------------+---------+
-- | Column Name  | Type    |
-- +--------------+---------+
-- | fail_date    | date    |
-- +--------------+---------+
-- Primary key for this table is fail_date.
-- Failed table contains the days of failed tasks.
-- Table: Succeeded
-- 
-- +--------------+---------+
-- | Column Name  | Type    |
-- +--------------+---------+
-- | success_date | date    |
-- +--------------+---------+
-- Primary key for this table is success_date.
-- Succeeded table contains the days of succeeded tasks.
--  
-- 
-- A system is running one task every day. Every task is independent of the previous tasks. The tasks can fail or succeed.
-- 
-- Write an SQL query to generate a report of period_state for each continuous interval of days in the period from 2019-01-01 to 2019-12-31.
-- 
-- period_state is 'failed' if tasks in this interval failed or 'succeeded' if tasks in this interval succeeded. Interval of days are retrieved as start_date and end_date.
-- 
-- Order result by start_date.
-- 
-- The query result format is in the following example:
-- 
-- Failed table:
-- +-------------------+
-- | fail_date         |
-- +-------------------+
-- | 2018-12-28        |
-- | 2018-12-29        |
-- | 2019-01-04        |
-- | 2019-01-05        |
-- +-------------------+
-- 
-- Succeeded table:
-- +-------------------+
-- | success_date      |
-- +-------------------+
-- | 2018-12-30        |
-- | 2018-12-31        |
-- | 2019-01-01        |
-- | 2019-01-02        |
-- | 2019-01-03        |
-- | 2019-01-06        |
-- +-------------------+
-- 
-- 
-- Result table:
-- +--------------+--------------+--------------+
-- | period_state | start_date   | end_date     |
-- +--------------+--------------+--------------+
-- | succeeded    | 2019-01-01   | 2019-01-03   |
-- | failed       | 2019-01-04   | 2019-01-05   |
-- | succeeded    | 2019-01-06   | 2019-01-06   |
-- +--------------+--------------+--------------+
-- 
-- The report ignored the system state in 2018 as we care about the system in the period 2019-01-01 to 2019-12-31.
-- From 2019-01-01 to 2019-01-03 all tasks succeeded and the system state was "succeeded".
-- From 2019-01-04 to 2019-01-05 all tasks failed and system state was "failed".
-- From 2019-01-06 to 2019-01-06 all tasks succeeded and system state was "succeeded".


--Solution
create table #failed
(fail_date date);

insert into #failed values
(	'12/28/2018'	),
(	'12/29/2018'	),
(	'1/4/2019'	),
(	'1/5/2019'	);


create table #successed
(success_date date);

insert into #successed values
(	'12/30/2018'),
(	'12/31/2018'),
(	'1/1/2019'),
(	'1/2/2019'),
(	'1/3/2019'),
(	'1/6/2019');


with com as
(select fail_date as dt,case when 1=1 then 'failed' end as status,rank()over(order by fail_date) from #failed
union
 select success_date as dt,case when 1=1 then 'success' end as status,rank()over(order by success_date)  from #successed 
)

,win as(
select dt, status,case when min(dt)over()= dt then dt 
                       when lag(status) over(order by dt)!= status then dt end as ch
    from com
)
,ser as
(
select dt,status,ch,last_value(ch ignore nulls)  over(order by dt ROWS UNBOUNDED PRECEDING ) as a from win
)select * from ser order by dt;

--select period_state,start_date,end_date from (
select a,status as period_state, min(dt) as start_date,max(dt) as end_date from ser where dt between '2019-01-01' and '2019-12-31' group by a,status) order by start_date ;

-----------------------------------------------------------

with cte1 as
(select fail_date as dates, 'failed' as stats, rank() over(order by fail_date) as rk
from #failed
union
select success_date as dates, 'succeeded' as stats, rank() over(order by success_date) as rk
from #successed),
cte2 as (
select dates, stats as period_state, rank() over(order by dates) as overall_rk, rk,
(rank() over(order by dates) - rk) as inv
from cte1)select * from cte2 order by dates;

select period_state, min(dates) as start_date, max(dates) as end_date
from cte2
where dates between '2019-01-01' and '2019-12-31'
group by period_state, inv
order by 2;
